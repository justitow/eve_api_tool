ramActivities
Contains the activity ID for different industry activites. Has the reactions ID type

activityID|activityName|iconNo|description|published
0|None||No activity|1
1|Manufacturing|18_02|Manufacturing|1
2|Researching Technology|33_02|Technological research|0
3|Researching Time Efficiency|33_02|Researching time efficiency|1
4|Researching Material Efficiency|33_02|Researching material efficiency|1
5|Copying|33_02|Copying|1
6|Duplicating||The process of creating an item, by studying an already existing item.|0
7|Reverse Engineering|33_02|The process of creating a blueprint from an item.|1
8|Invention|33_02|The process of creating a more advanced item based on an existing item|1
11|Reactions|18_02|The process of combining raw and intermediate materials to create advanced components|1


REACTIONS
activityID=11

SELECT * FROM INVTYPES WHERE INVTYPES.TYPEID IN (SELECT typeid FROM industryactivity where activityid=11); This gets the invtypes info for all reactions (not counting 'unrefined')

Maybe. Now I need to check the groups found with:  

SELECT * FROM invGroups WHERE UPPER(groupName) like '%REACTION%';

groupID|categoryID|groupName|iconID|useBasePrice
436|24|Simple Reaction|2665|1|0|0|0|1
484|24|Complex Reactions|2666|1|0|0|0|1
661|24|Simple Biochemical Reactions|2665|0|0|0|0|1
662|24|Complex Biochemical Reactions|2665|0|0|0|0|1
977|24|Hybrid Reactions||1|0|0|0|1

1888|9|Composite Reaction Formulas||1|0|0|0|1
1889|9|Polymer Reaction Formulas||1|0|0|0|1
1890|9|Biochemical Reaction Formulas||1|0|0|0|1

The category from the first part is 24, which means REACTION (is this now deprecated?)
The category from the second aprt is 9, which means BLUEPRINT

Assuming I'm not making boosters, I just need to look at 1888 and 1889
industryActivity is just the time for the reaction

Now I want to know about PI materials....I'll check group
PI Categories?

SELECT * FROM invCategories WHERE UPPER(categoryName) LIKE '%PLANET%';
categoryID|categoryName|iconID|published
41|Planetary Interaction||1
42|Planetary Resources||1
43|Planetary Commodities||1


industryActivity is the time it takes for blueprints to happen, and links the typeid of the reaction blueprint to the activity id

industryBlueprint is MaxProductionLimit - this is....?

SELECT typeID FROM invTypes WHERE groupID IN (1888, 1889, 1890);
SELECT typeID FROM industryActivity WHERE activityID=11;  **** I like this one better because industryActivity is way smaller


SELECT * FROM industryActivityProducts WHERE typeID IN (SELECT typeID FROM industryActivity WHERE activityID=11);

typeID|activityID|productTypeID|quantity
46186|11|33337|200
46187|11|32821|1
46188|11|32822|1
46189|11|32823|1
46190|11|32824|1
46191|11|32825|1
46192|11|32826|1
46193|11|32827|1
46194|11|32828|1
46195|11|32829|1
46196|11|29664|1
46197|11|29663|1
46198|11|29662|1
46199|11|29661|1
46200|11|29660|1
46201|11|29659|1
46202|11|33339|1
46203|11|33338|1
46204|11|16671|10000

What is this block about?
Making the urefined reaction thingy
Can either leave this out or include it
Might just allow it to exist.


SELECT * FROM industryActivityMaterials WHERE typeID IN (SELECT typeID FROM industryActivity WHERE activityID=11);

Everything seems to be within order


SELECT DISTINCT MATS.materialTypeID 
    FROM industryActivityMaterials MATS 
    WHERE MATS.typeID 
    IN
        (SELECT typeID 
        FROM industryActivity IACT 
        WHERE IACT.activityID=11) 
    ORDER BY MATS.materialTypeID ASC;

SELECT DISTINCT productTypeID FROM industryActivityProducts WHERE typeID IN(SELECT typeID FROM industryActivity WHERE activityID=11) ORDER BY productTypeID ASC;


SELECT typeID FROM industryActivityMaterials WHERE typeID IN(SELECT typeID FROM industryActivity WHERE activityID=11) AND materialTypeID in (SELECT DISTINCT productTypeID FROM industryActivityProducts WHERE typeID IN(SELECT typeID FROM industryActivity WHERE activityID=11))ORDER BY typeID ASC;
I also need to take into account that it is possible to use the subreactions instead of the material

Should I do this as a seperate entry in the thing? So like,
create row in database for both main and subreaction, and show source?
Make it recursive?

Each material will show a source
    Source will either be a station or a 

    Entry in table for each possible location?
    IF LOCATION=='CREATE'
    Time to make material on the table
    
Gather the buy price for materials
Gather the sell price for materials

SELECT DISTINCT productTypeID FROM industryActivityProducts WHERE productTypeID IN (SELECT materialTypeID FROM industryActivityMaterials WHERE materialtypeID IN(SELECT typeID FROM industryActivity WHERE activityID=11));
This is not working. For some reason, its putting the typeID for fuel block

SELECT DISTINCT mats.materialTypeID 
    FROM industryActivityMaterials mats 
    WHERE mats.materialTypeID IN 
        (SELECT prod.productTypeID 
        FROM industryActivityProducts prod 
        WHERE prod.TypeID IN 
            (SELECT inda.typeID 
            FROM industryActivity inda 
            WHERE inda.activityID=11)
        ) ORDER BY mats.materialTypeID ASC;
        

SELECT DISTINCT prod.productTypeID 
    FROM industryActivityProducts prod 
    WHERE prod.productTypeID IN 
        (SELECT mats.materialTypeID 
        FROM industryActivityMaterials mats 
        WHERE mats.TypeID IN 
            (SELECT inda.typeID 
            FROM industryActivity inda 
            WHERE inda.activityID=11)
        ) ORDER BY prod.ProductTypeID ASC;
        
This has way less resutls
Does not look correct
Maybe I can do an inner join?



THIS GETS ME ALL OF THE COMPOSITE REACTIONS PROBBALY?

SELECT invt.typeName, invt.typeid, invt.groupid 
    FROM 
        (SELECT DISTINCT prod.productTypeID 
        FROM industryActivityProducts prod
        WHERE prod.typeID IN 
            (SELECT inac.typeID 
                FROM industryActivity inac 
                WHERE inac.activityID=11)) all_products
    INNER JOIN
        (SELECT DISTINCT materialTypeID 
        FROM industryActivityMaterials 
        WHERE typeID IN
            (SELECT typeID 
                FROM industryActivity 
                WHERE activityID=11)) all_materials
        ON all_products.productTypeID=all_materials.materialTypeID
    JOIN invTypes invt
        ON invt.typeid=all_materials.materialTypeID
    WHERE invt.groupID != 712
    ORDER BY all_products.productTypeID ASC;
    
    
sqlite> select groupname from invgroups where groupid=428;
Intermediate Materials

I'm going to check with the rest of the materials now to check their groups
Or I'll check the products...?

SELECT DISTINCT MATS.materialTypeID, TYPE.typename, type.groupID 
    FROM industryActivityMaterials MATS 
    JOIN invTypes TYPE
        ON TYPE.typeID=MATS.materialTypeID
    WHERE 
        MATS.typeID IN
            (SELECT typeID 
            FROM industryActivity IACT 
            WHERE IACT.activityID=11)
        -- AND TYPE.groupID=428
    ORDER BY MATS.materialTypeID ASC;
    
16654|Titanium Chromide|428
16655|Crystallite Alloy|428
16656|Fernite Alloy|428
16657|Rolled Tungsten Alloy|428
16658|Silicon Diborite|428
16659|Carbon Polymers|428
16660|Ceramic Powder|428
16661|Sulfuric Acid|428
16662|Platinum Technite|428
16663|Caesarium Cadmide|428
16664|Solerium|428
16665|Hexite|428
16666|Hyperflurite|428
16667|Neo Mercurite|428
16668|Dysporite|428
16669|Ferrofluid|428
17769|Fluxed Condensates|428
17959|Vanadium Hafnite|428
17960|Prometium|428
33336|Thulium Hafnite|428
33337|Promethium Mercurite|428

This should be all of the materials that are subreactions themselves? (the GROUPID=428 ones)
    
Maybe filter out biochemical materials?
(groupID != 712)


SELECT COUNT() FROM (SELECT DISTINCT MATS.materialTypeID, TYPE.typename, type.groupID 
    FROM industryActivityMaterials MATS 
    JOIN invTypes TYPE
        ON TYPE.typeID=MATS.materialTypeID
    WHERE 
        MATS.typeID IN
            (SELECT typeID 
            FROM industryActivity IACT 
            WHERE IACT.activityID=11)
         AND TYPE.groupID=428
    ORDER BY MATS.materialTypeID ASC);
    
    
SELECT COUNT() FROM (SELECT invt.typeName, invt.typeid, invt.groupid 
    FROM 
        (SELECT DISTINCT prod.productTypeID 
        FROM industryActivityProducts prod
        WHERE prod.typeID IN 
            (SELECT inac.typeID 
                FROM industryActivity inac 
                WHERE inac.activityID=11)) all_products
    INNER JOIN
        (SELECT DISTINCT materialTypeID 
        FROM industryActivityMaterials 
        WHERE typeID IN
            (SELECT typeID 
                FROM industryActivity 
                WHERE activityID=11)) all_materials
        ON all_products.productTypeID=all_materials.materialTypeID
    JOIN invTypes invt
        ON invt.typeid=all_materials.materialTypeID
    WHERE invt.groupID != 712
    ORDER BY all_products.productTypeID ASC);
    
Both counts produce result of 21, which means that they are both ways to see the materials that can be produced from reactions


SELECT invt.typeName, invt.typeid, invt.groupid 
    FROM 
        (SELECT DISTINCT prod.productTypeID 
        FROM industryActivityProducts prod
        WHERE prod.typeID IN 
            (SELECT inac.typeID 
                FROM industryActivity inac 
                WHERE inac.activityID=11)) all_products
    INNER JOIN
        (SELECT DISTINCT materialTypeID 
        FROM industryActivityMaterials 
        WHERE typeID IN
            (SELECT typeID 
                FROM industryActivity 
                WHERE activityID=11)) all_materials
        ON all_products.productTypeID=all_materials.materialTypeID
    JOIN invTypes invt
        ON invt.typeid=all_materials.materialTypeID
    --WHERE invt.groupID != 712
    ORDER BY all_products.productTypeID ASC;
    
This one seems like it is the best "future proof" one
Maybe I should create my own tables

CREATE TABLE ODB.reaction_materials AS 
    SELECT * 
    FROM industryActivityMaterials MATS
    WHERE MATS.typeID IN
        (SELECT IACT.typeID 
        FROM industryActivity IACT
        WHERE IACT.activityID=11);
        
CREATE TABLE ODB.reaction_products AS
    SELECT * 
    FROM industryActivityProducts PROD
    WHERE PROD.typeID IN 
        (SELECT INAC.typeID 
        FROM industryActivity INAC 
        WHERE INAC.activityID=11);
        
        
SELECT *
    FROM 
        (SELECT DISTINCT productTypeID 
        FROM ODB.reaction_products) products
    INNER JOIN
        (SELECT DISTINCT materialTypeID 
        FROM ODB.reaction_materials) materials
    ON products.productTypeID=materials.materialTypeID
    ORDER BY products.productTypeID ASC;
    
Now I'll make a table for the industryActivity, since I might as well at this point

CREATE TABLE ODB.reaction_activities AS
    SELECT * FROM industryActivity WHERE activityID=11;
    

In summary, at this point, I have:
    -table with reaction materials
    -table with reaction products
    -table with reaction activities

    
How am I going to store the price?
What data can I retrieve from the API?
How granular should I be looking at the data?


/markets/{region_id}/history/       --- List historical market statistics in a region
/markets/{region_id}/orders/        --- List orders in a region
/markets/{region_id}/types/         --- List type IDs relevant to a market
/markets/groups/                    --- Get item groups
/markets/groups/{market_group_id}/  --- Get item group information
/markets/prices/                    --- List market prices
/markets/structures/{structure_id}/ --- List orders in a structure


I will use 
/markets/{region_id}/history/       --- List historical market statistics in a region
/markets/{region_id}/orders/        --- List orders in a region

For Jita, at least, if I don't use the type_id, there are ~300 pages
There are 98 unique materials
          94 unique products

What about the other markets? Probably similarish results?

How should I go about the data for the markets


SELECT regionID, solarSystemNAME from mapSolarSystems where solarsystemname IN ('Jita', 'Hek', 'Amarr', 'Dodixie');

regionID|solarSystemName
10000002|Jita
10000042|Hek
10000043|Amarr
10000032|Dodixie


So I need to create a table to store the values-

{
'duration': 90, 
'is_buy_order': False, 
'issued': <pyswagger.primitives._time.Datetime object at 0x0AD08AD0>, 
'location_id': 60003760, 
'min_volume': 1, 
'order_id': 5219840991, 
'price': 17490.6, 
'range': 'region', 
'system_id': 30000142, 
'type_id': 16657, 
'volume_remain': 60000, 
volume_total': 60000
}

I may want to also include the regionID

CREATE TABLE ODB.market_info(
duration INTEGER,
is_buy_order INTEGER,
issued DATETIME,
location_id INTEGER,
min_volume INTEGER,
order_id INTEGER,
price FLOAT,
range TEXT,
system_id INTEGER,
volume_remain INTEGER,
volume_total INTEGER,
region_id INTEGER
);


SELECT * FROM market_info WHERE type_id=16658 AND is_buy_order=1 ORDER BY price DESC;
Is correct when I verify against evemarketer
system_id can get a good idea of where I'm actually going to be selling


For the requests, I'm just gonna do:
SELECT materialtypeID from ODB.reaction_materials UNION SELECT producttypeID FROM odb.reaction_products;
And then do all of the results for these. It removed around 20 extra requests per region



SELECT DISTINCT materialTypeID FROM reaction_materials WHERE materialTypeID NOT IN (SELECT materialTypeID FROM reaction_materials WHERE materialTypeID IN (SELECT productTypeID FROM reaction_products))
SELECT DISTINCT productTypeID FROM reaction_products WHERE productTypeID NOT IN (SELECT materialTypeID FROM reaction_materials WHERE materialTypeID IN (SELECT productTypeID FROM reaction_products))
SELECT DISTINCT materialTypeID FROM reaction_materials WHERE materialTypeID IN (SELECT productTypeID FROM reaction_products)

These three commands shoold get all of the typid's, sorted by the information requested




CREATE TABLE ODB.market_history
(
    average INTEGER,
    history_date DATE,
    highest INTEGER,
    lowest INTEGER,
    order_count INTEGER,
    volume INTEGER,
    type_id INTEGER
)

I'll probably worry about this part later??


Okay
I have the market data for the regions that I am in. 

Now I need to...



Find the best market for buying or selling for a particular item
 - how do I want to do this?
 - how do I want to store this information? (probably in a database)
 - how do I want to manage the subreactions? ((sub-sub-reactions?))
 
CREATE TABLE ODB.market_best
(
    type_id INTEGER,
    price FLOAT,
    volume INTEGER,
    buy_or_sell INTEGER,
    location TEXT, -- not sure about this one
    time_cost INTEGER
);

I want an easy way to get the list of which places have the cheapest stuff, broken down by location
This list will have all possible location for a material? So like, the best price at that REGION_ID?

SELECT * FROM (SELECT * FROM ODB.market_info WHERE type_id=16655 AND is_buy_order=0 ORDER BY PRICE ASC) GROUP BY system_ID;

This gets the minimum value for each system
I think I need to work out 'minimum need value' so that the region I am looking at has neough to support the volumes I need to buy

I want to be able to support the option to enable multiple-system buys?
but that will be later
    1.) For each product, create a list of the trade hubs that carry it
    2.) For each trade hub, find the price for $PARAM amount of the material
    3.) Insert that information and maybe some other stuff into the market_best table
    4.) For each reaction with subreactions, find the cost to produce it from the subcomponents
    5.) Insert that batch of info into the table
    
    
***are there sub-sub-reactions?****

Lets check sub-sub reactions
SELECT DISTINCT typeID FROM reaction_materials WHERE materialTypeID IN (SELECT productTypeID FROM reaction_products)

SELECT productTypeID from reaction_products WHERE typeID IN (SELECT DISTINCT typeID FROM reaction_materials WHERE materialTypeID IN (SELECT productTypeID FROM reaction_products));

shit. there are sub-sub-reactions
current list -> [products used as materials]
I want [products used as materials in reactions whos products are used as materials]

sub-sub-sub reactions? I don't think sooo

so how do I do this?
WAIT, are there SUB-SUB reactions?
I don't think there actually are......maybe....hopefully....

To get the cheapest price, why not just run it twice? 
    -For each typid, select MIN(possible_locations)
        -now have best price for each location (not counting reacting materials ourself)
    -Add up the values for reacting things ourselvves using the best location price
    -for each typeid, select MIN(possible_locations)
        -now have a best price for locations (including reaction prices, but not counting subreactins)
    -add up the values for reacting things ourseves using the best location price.

    "materials that are products but their reaction's products are not materials"

SELECT DISTINCT mats.typeid, typename from reaction_materials mats 
    JOIN reaction_products prods ON mats.typeid=prods.typeid
    JOIN sde.invtypes on sde.invtypes.typeid=mats.typeid
    WHERE materialTypeID 
        IN (SELECT productTypeID from reaction_products)
        AND productTypeID NOT IN (SELECT materialTypeID from reaction_materials);

This gets me all of the items that have a sub-reaction

I sorta want the oposite though

SELECT DISTINCT prods.typeid, typename from reaction_products prods
    JOIN reaction_materials mats ON mats.typeid=prods.typeid
    JOIN sde.invtypes on sde.invtypes.typeid=prods.typeid
    WHERE productTypeID 
        IN (SELECT materialTypeID from reaction_materials)
        AND materialTypeID NOT IN (SELECT productTypeID from reaction_products);

SELECT COUNT(*) FROM (SELECT DISTINCT mats.typeid, typename from reaction_materials mats JOIN reaction_products prods ON mats.typeid=prods.typeid JOIN sde.invtypes on sde.invtypes.typeid=mats.typeid WHERE materialTypeID  IN (SELECT productTypeID from reaction_products) AND productTypeID NOT IN (SELECT materialTypeID from reaction_materials));

SELECT COUNT(*) FROM (SELECT DISTINCT mats.typeid, typename from reaction_products prods JOIN reaction_materials mats ON mats.typeid=prods.typeid JOIN sde.invtypes on sde.invtypes.typeid=mats.typeid WHERE productTypeID  IN (SELECT materialTypeID from reaction_materials) AND materialTypeID NOT IN (SELECT productTypeID from reaction_products));

Honestly not 100% if this count is correct

For super-reactions:
45732|Test Reaction Blueprint
46204|Titanium Carbide Reaction Formula
46205|Crystalline Carbonide Reaction Formula
46206|Fernite Carbide Reaction Formula
46207|Tungsten Carbide Reaction Formula
46208|Sylramic Fibers Reaction Formula
46209|Fulleride Reaction Formula
46210|Phenolic Composites Reaction Formula
46211|Nanotransistors Reaction Formula
46212|Hypersynaptic Fibers Reaction Formula
46213|Ferrogel Reaction Formula
46214|Fermionic Condensates Reaction Formula
46215|Plasmonic Metamaterials Reaction Formula
46216|Terahertz Metamaterials Reaction Formula
46217|Photonic Metamaterials Reaction Formula
46218|Nonlinear Metamaterials Reaction Formula
46235|Strong Blue Pill Booster Reaction Formula
46244|Strong Crash Booster Reaction Formula
46245|Strong Drop Booster Reaction Formula
46246|Strong Exile Booster Reaction Formula
46247|Strong Mindflood Booster Reaction Formula
46248|Strong Frentix Booster Reaction Formula
46249|Strong X-Instinct Booster Reaction Formula
46250|Strong Sooth Sayer Booster Reaction Formula

For subreaction:
46166|Caesarium Cadmide Reaction Formula
46167|Carbon Polymers Reaction Formula
46168|Ceramic Powder Reaction Formula
46169|Crystallite Alloy Reaction Formula
46170|Dysporite Reaction Formula
46171|Fernite Alloy Reaction Formula
46172|Ferrofluid Reaction Formula
46173|Fluxed Condensates Reaction Formula
46174|Hexite Reaction Formula
46175|Hyperflurite Reaction Formula
46176|Neo Mercurite Reaction Formula
46177|Platinum Technite Reaction Formula
46178|Rolled Tungsten Alloy Reaction Formula
46179|Silicon Diborite Reaction Formula
46180|Solerium Reaction Formula
46181|Sulfuric Acid Reaction Formula
46182|Titanium Chromide Reaction Formula
46183|Vanadium Hafnite Reaction Formula
46184|Prometium Reaction Formula
46185|Thulium Hafnite Reaction Formula
46186|Promethium Mercurite Reaction Formula
46222|Standard Frentix Booster Reaction Formula
46223|Standard Drop Booster Reaction Formula
46224|Standard Exile Booster Reaction Formula
46225|Standard Mindflood Booster Reaction Formula
46226|Standard X-Instinct Booster Reaction Formula
46227|Standard Sooth Sayer Booster Reaction Formula
46230|Standard Blue Pill Booster Reaction Formula
46231|Standard Crash Booster Reaction Formula
46236|Improved Crash Booster Reaction Formula
46237|Improved Drop Booster Reaction Formula
46238|Improved Exile Booster Reaction Formula
46240|Improved Mindflood Booster Reaction Formula
46241|Improved Frentix Booster Reaction Formula
46242|Improved X-Instinct Booster Reaction Formula
46243|Improved Sooth Sayer Booster Reaction Formula
46251|Improved Blue Pill Booster Reaction Formula

I defined 'subreaction' as a reactiont that can be donemyself who's product is used in a future reaction
'superreaction' is a reaction that is produced using materials that come from a subreaction

1.) 
SELECT DISTINCT materialTypeID from reaction_materials
    JOIN reaction_products ON reaction_materials.typeid=reaction_products.typeid
    WHERE productTypeID NOT IN (select materialTypeID from reaction_materials);
    
SELECT DISTINCT prods.productTypeID, typeName from reaction_products prods 
    JOIN reaction_materials mats ON mats.typeid=prods.typeid
    JOIN sde.invTypes on sde.invTypes.typeID=prods.productTypeID
    WHERE materialTypeID IN (SELECT productTypeID from reaction_products);

SUBREACTION:
SELECT DISTINCT prods.productTypeID, typeName from reaction_products prods
    JOIN sde.invTypes on sde.invTypes.typeID=prods.productTypeID
    WHERE productTypeID IN (SELECT materialTypeID from reaction_materials);


I want

0.) reactions whos materials are not products and whos products are not materials
1.) Reactions whos materials are not products and whos products are materials
2.) reactions whos materials are products and whos products are materials
3.) Reactions whos materials are products and whos products are not materials


0.) 
SELECT DISTINCT materialTypeID from reaction_materials
    JOIN reaction_products ON reaction_products.typeID=reaction_materials.typeID);

count of total from ^ query is 98. total reactions is 95. just realized there is issue with that join


Thoughts are, if thereis only one product for each reaction, then I can just join the products onto the reactions by typeid

Cool, I got all 1's
So yes, can just join it that way

0.) 
SELECT DISTINCT materialTypeID FROM reaction_materials mats
    JOIN reaction_products prods ON prods.typeID=mats.typeID
    WHERE materialTypeID NOT IN (SELECT productTypeID from reaction_products)
    AND productTypeID NOT IN (SELECT materialTypeID from reaction_products);

SELECT DISTINCT mats.typeID, typeName FROM reaction_materials mats
    JOIN reaction_products prods ON prods.typeID=mats.typeID
    JOIN SDE.invTypes ON SDE.invTypes.typeID=mats.materialTypeID
    WHERE (materialTypeID NOT IN (SELECT productTypeID from reaction_products))
    AND (productTypeID NOT IN (SELECT materialTypeID from reaction_materials));
That is not working as intended. For some reason, ferrogel and a few other reactions like that are being pulled with this query


I need to try phrasing this differently

How exactly.... not sure


I still don't understand what is causing all of the reactions to pop up. 
I thought that that command should just pull the materials that aren't associated with subreactions. Instead, it seems to be pulling the reactions that use subreactions as materials as well as the ones that aren't associated with them.

Solution: use more subqueries?

...but like, how?


SELECT SDE.industryActivity.typeID, typeName from SDE.industryActivity
    JOIN sde.invTypes ON sde.invTypes.typeID=SDE.industryActivity.typeID
    WHERE SDE.industryActivity.typeID IN (SELECT typeID from reaction_materials 
        WHERE materialTypeID NOT IN 
        (SELECT productTypeID FROM SDE.industryActivityProducts WHERE activityID=11))
    AND SDE.industryActivity.typeID IN (SELECT typeID FROM reaction_products
        WHERE productTypeID NOT IN
        (SELECT materialTypeID FROM SDE.industryActivityMaterials WHERE activityID=11))
    AND activityID=11;


Okay, lets look at Ferrogel

SELECT materialTypeID, typeName FROM reaction_materials JOIN SDE.invTypes ON SDE.invTypes.typeID=materialTypeID WHERE reaction_materials.typeID=46213;

materialTypeID|typeName
4246|Hydrogen Fuel Block
16665|Hexite
16666|Hyperflurite
16669|Ferrofluid
17960|Prometium


SELECT productTypeID, typeName FROM reaction_products JOIN SDE.invTypes ON SDE.invTypes.typeID=productTypeID WHERE reaction_products.typeID=46213;

productTypeID|typeName
16683|Ferrogel


Okay, so I know that Ferrogel won't be in the materials
But why aren't the materials showing up in the products?

SELECT typeID FROM reaction_products WHERE productTypeID=16665;


WAIT, its finding any isntance where the materialTypeID is not a product, not that ALL materialTypeID's aren't products (so like, returninga false positive on fuel blocks)

So I might want to use the ANY/ALL keywords?   
That might not exist in SQLite...
I can probably use COUNT


SELECT reaction_materials.typeID, typeName FROM reaction_materials m_outer
    JOIN sde.invTypes ON sde.invTypes.typeid=m_outer.typeID
    WHERE (SELECT COUNT(*) FROM reaction_products WHERE productTypeID IN (SELECT materialTypeID FROM reaction_materials m_inner WHERE m_outer.typeID=m_inner.typeID))>0; 

This doesn't work becuase its still not grouping the materials and checking the products

SELECT invt.typeID --, invt.typeName
FROM SDE.industryActivity actv
JOIN SDE.invTypes invt ON invt.typeID=actv.typeID
WHERE actv.activityID=11
AND 0 = (
    SELECT COUNT(*) 
    FROM (
        SELECT * 
        FROM reaction_materials mats 
        WHERE mats.typeid=actv.typeid
        AND mats.materialTypeID IN (
            SELECT productTypeID
            FROM reaction_products
        )
    )
)
AND 0 = (
    SELECT COUNT(*) 
    FROM (
        SELECT * 
        FROM reaction_products prod 
        WHERE prod.typeid=actv.typeid
        AND prod.productTypeID IN (
            SELECT materialTypeID
            FROM reaction_materials
        )
    )
);


This will work with permutations of the 0's
I do want to double check with a count first though

(=,=) -> 34
(!=, !=) -> 8
(=, !=) -> 29
(!=, =) -> 24
Total -> 95

Total COUNT -> 95
Okay, checks out.

I want to put that out into a function and just replace the "!=" and "=" for the four iteration
from the !=, !=, I also can see that other than the boosters, there aren't any sub-sub reactions.

1.) ('=', '=')
2.) ('=', '!=')
3.) ('!=', '!=')
4.) ('!=', '=')

Okay, so this gets me all of the reactions in each partition.
But now I want to seperate the materials for each reaction


SELECT DISTINCT materialTypeID
FROM reaction_materials
WHERE typeID IN (
    SELECT invt.typeID --, invt.typeName
    FROM SDE.industryActivity actv
    JOIN SDE.invTypes invt ON invt.typeID=actv.typeID
    WHERE actv.activityID=11
    AND 0 != (
        SELECT COUNT(*) 
        FROM (
            SELECT * 
            FROM reaction_materials mats 
            WHERE mats.typeid=actv.typeid
            AND mats.materialTypeID IN (
                SELECT productTypeID
                FROM reaction_products
            )
        )
    )
    AND 0 != (
        SELECT COUNT(*) 
        FROM (
            SELECT * 
            FROM reaction_products prod 
            WHERE prod.typeid=actv.typeid
            AND prod.productTypeID IN (
                SELECT materialTypeID
                FROM reaction_materials
            )
        )
    )
)
AND materialTypeID NOT IN (SELECT type_id FROM best_materials);

== 43
=!= 33
!== 42
!=!= 14
cacled total: 132
acutal toatl: 98

CREATE TABLE best_materials
(
    type_id INTEGER,
    price FLOAT,
    volume INTEGER,
    buy_or_sell INTEGER,
    location TEXT, -- not sure about this one
    time_cost INTEGER
);

CREATE 

At the first stage, when I calculate the price to product the product, I am probably going to want to stick that in the market_info? For materials? I think I'm getting myself confued.

So what is going to happen when I calculate the values?
-for each partition
    -create a python list of the reactionID's 
    -create a python list of the reaction materials
    -for each of the materials in the list, find the best price to obtain the material from the market_info table, place that in the best_cost_to_obtain
        -represents the cheapest way to obtain the item
        -there should just be one entry per material in the best_materials table.
    -for each reaction calculate the cost to produce the item based on the best_cost(to_obtain) table
    -place these costs to obtain in the market_info table with the system_id set to a custom value
-obtain a list of the product ID's that are not already in the best_cost_to_obtain
-find the best cost to obtain, place it into the best_cost_to_obtain table.
-for each material in the products list find the best cost to sell
    -uses the market_info, but with the buy order set to false
    -calculate the profit, place it in the profits table.
    
SELECT * FROM market_info WHERE type_id=16655 AND is_buy_order=0 ORDER BY price, system_id ASC;

    a.) I get the list of systems
        For each system, I query the db for the prices and volume
        I take the minimum of the total price for the system
        I place the smalled on the in best_cost_to_obtain table
    b.) I write a query that takes the min of regions and do the calculations in SQL.

SELECT system_id, MIN(cost_sum) FROM (SELECT system_id, SUM(PRICE) AS COST_SUM FROM market_info WHERE type_id=16665 AND is_buy_order=0 GROUP BY SYSTEM_ID) GROUP BY system_id;
SELECT system_id, MAX(price) FROM market_info WHERE type_id=16665 AND is_buy_order=1 GROUP BY system_id ORDER BY price ASC;

Its not really easy enough to select a granular minimum volume of materials with just a sql query.
I want to
    -for each material
        -for each market
            -fetch all prices and volumes ordered by price, asc
            -find the price for the minimum specified ammount of material (if self, do I make numbers for volume set?)
            -how will my minimum product ammount be set?
        -from this list, find best markets
        
    -orrr, find the cheapest places to buy until I reach the minimum required material
    - I can work in the ability to do both by selecting the MAX of the (SUM grouped by systemID)
    - So if I have multi-system gathering enabled, then it will place multiple rows to the best-buy table
    
liquidate
purchase
selling
seller
buyer
sell
buy
obtain
bought
sold
remove
deposit
minprice
maxprice
    
might do best minprice and best maxprice    

DROP TABLE BEST_PRICE;
CREATE TABLE best_price
(
    type_id INTEGER,
    price FLOAT,
    volume INTEGER,
    min_price INTEGER,
    location_id INTEGER, -- not sure about this one 
    time INTEGER
);

SELECT price, system_id, volume_remain
    FROM market_info 
    WHERE type_id=4246
    AND is_buy_order=0
    ORDER BY price ASC;

I have a bit of an issue here. When I am collecting the minimum value, if I have to deal with multiple places, I don't know how to collect them all in a structure.
-> I think I will use a dictionary and add the volume_count to each entry by price

Do I want to add up the minimum ammount, or just round up with the total number of reactants. With each volume chunk? ((I think round up))

How do I deal with the volume from a self-produced? 
    The region_id will be null for those 

INSERT INTO best_price (type_id, price, min_price, system_id) VALUES (?,?,1,?)
I'm being thrown off somewhere in the process of readding stuff to the tables, but I'm not really sure where.

Okay, I think for now, I just want to do it by region.

maybe a seperate table for production_cost?
I'm gonna scrap most of what is threre, and do two sql statements

What about having a seperate table for production cost? why would I do this?

This doesn't deal with the case in which its cheaper to buy some amount and then react for the rest.


For the market info, I think I can just
SELECT COUNT() FROM (SELECT DISTINCT productTypeID 
FROM reaction_products 
WHERE productTypeID NOT IN (
    SELECT DISTINCT materialTypeID 
    FROM reaction_materials
));

SELECT COUNT() FROM (SELECT DISTINCT productTypeID FROM reaction_products WHERE productTypeID IN (SELECT materialTypeID FROM reaction_materials));

COUNT materials = 61
COUNT products = 57
count BOTH = 37

k yeah, my original was overly complicated

Still on the question though -> where do I put the order information for products/materials that I produce myself?
Should it be stored in a database between runs of the sql program?
Should it just be part of a python data structure untill everything has been processed?
    - I feel like this may be the best way to do it.
    - Have a 'final best' in a dictionary
How will it be stored though? 
    -One row for each station that I get the material from?
    -One row for each material?
        -I don't think this would work because I want to have the location infromation easily accessible.

*** I CAN ADD A COULUMN TO MARKET_INFO for best price****
    -Add a "best price" column to market_info
    
CREATE TABLE material_cost (
    type_id INTEGER,
    cost FLOAT,
    time INTEGER,
    self_produced INTEGER
    );
    
Having a weird issue:
    9850|427.665430558032|0|0
    9850||0|0
    
    25335|3287074.7777551|0|0
    25335||0|0
    
    25341|313211.192676906|0|0
    25341||0|0
    
In the instances where I'm not finding a market sell order, i'm getting duplicates in my material_cost table

This was happening because the typeID I was getting was in the for-loop for the marketinfo orders. If there were no market_orders for a given item, 
then the program kept going, but used the previous value for the typeID when updating the material_cost table.

So, I've decided to add a column to market_info that indicates if a row will be purchased for the reactions
There is also a table that holds the average price for the first $min_materials materials.

Should I do some sort of work for the maximum ammount? Possibly, but I'll implement that later on.

Do I want the sell-price to be similar to the function of the buy price?
yeh, probs

DROP TABLE product_gross;
CREATE TABLE product_gross (
        type_id INTEGER,
        sell_price FLOAT,
        product_count INTEGER
);

DROP TABLE reaction_margins;
CREATE TABLE reaction_margins(
    product_type_id INTEGER,
    obtain_price FLOAT,
    sell_price FLOAT,
    margin FLOAT);

SELECT typeName, typeID, margins
FROM reaction_margins
JOIN SDE.invtypes ON typeID=product_type_id
ORDER BY margins DESC;

DROP TABLE material_cost;
    CREATE TABLE material_cost (
    type_id INTEGER,
    cost FLOAT,
    time INTEGER,
    self_produced INTEGER
    );

sqlite> SELECT * FROM reaction_margins WHERE count IS NULL;
16666|41599.9|38182.11|-3417.78999999999|
16664|16950.3691282218|16913.5|-36.8691282218315|
25333|83991.5169320296|21817.5874372587|-62173.9294947709|
25334|280012.392241379|45030.8889824854|-234981.503258894|
25340|349999.988364566|55000.99|-294998.998364566|
25341|313211.192676906|75000.02|-238211.172676906|
sqlite> 


THis is happening, because the table is not always recieving a count (when its cheaper to buy than to self-product)

Do I want to do a recursion for the sub-reactions?

I think I want to combine the product_gross, material_cost tables into one table
	-material_cost
	-product_gross

DROP TABLE reaction_items;	
CREATE TABLE reaction_items(
	type_id,
	production_cost,
	buy_cost,
	sell_cost
);

Okay, now I want to be able to go from system_id to system name
hmmmmmmmmmm

SELECT solarSystemName
from SDE.mapSolarSystems
WHERE solarSystemID=?

I need to get it to ignore the systems that are lowsec

DELETE FROM market_info
WHERE system_id IN (
	SELECT DISTINCT system_id
	FROM market_info
	JOIN SDE.mapSolarSystems ON solarSystemID=system_id
	WHERE security<.5
);

DROP TABLE market_info;
CREATE TABLE market_info(
duration INTEGER,
is_buy_order INTEGER,
issued DATETIME,
location_id INTEGER,
min_volume INTEGER,
order_id INTEGER,
price FLOAT,
range TEXT,
system_id INTEGER,
volume_remain INTEGER,
volume_total INTEGER,
region_id INTEGER, 
type_id INTEGER, 
marked_for_buy INTEGER,
date_pulled DATETIME);

I sorta want to change the "current recipe" value to actually be something with the database?

Current goals:
	-implement market history fetch
		-the requests should come out in the same order that the market orders are put in. So what I can do is:
			-get list of productTypeID
			-create list of requests
			-keep list of productTypeID's
			-make requests
			-iterate through responses
			-access productTypeID by using the index from the iterator (enum)
			
			I have a bit of a quandry? So like, I can access the region_id from the original request tuple....but....I have to access a _p variable. Which means its not supposed to be 
			front facing? I'm going to research into that (market_order_operation[0]._p['path']['region_id'])
op				market_order_operation[0].path[9:17]
			
			
	-implement the current recipe into a database entry and a function that displays the entry
		-make sure to currectly label subcomponent values (make a column "product_type_id"?)
	-implement the shopping list feature
		-Tells me how much of what materials to get from which markets
		-Calculates based on the number of reactions specified
		-Calculatues total volume at each market
	-Create a usable and non-broken interface
	-Adam wants a thing that will produce maximum ammount of profit possible
		-I should be able to set the value, and recalc the cost for each?
		-can I do this without disrupting the saved values?
			-I think I can, by saving the original value, and then incrementing,
			and running self_production_cost_evaluator(cur, reactionID),
			buy_cost_evaluator(cur, type_id), sell_cost_evaluator
	-Limit the writes to the database
		-instead of recreating the table, just insert the values, colated at once?
		-or at least, only update once instead of twice
		-I might be able to combine the inserts of the table from the self_production and buy_price_evaluator
